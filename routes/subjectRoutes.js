const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Subject = require('../models/subject');
const verifyToken = require('../middlewares/authMiddleware');

// üîç Validate ObjectId middleware
function validateObjectId(req, res, next) {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: '‚ùå Invalid ID format' });
  }
  next();
}

// ‚úÖ GET all subjects (public)
router.get('/', async (req, res) => {
  try {
    const subjects = await Subject.find().sort({ createdAt: -1 });
    res.status(200).json(subjects);
  } catch (err) {
    console.error('‚ùå Error fetching subjects:', err);
    res.status(500).json({ message: '‚ùå Failed to fetch subjects' });
  }
});

// ‚úÖ GET one subject by ID (optional)
router.get('/:id', validateObjectId, async (req, res) => {
  try {
    const subject = await Subject.findById(req.params.id);
    if (!subject) return res.status(404).json({ message: '‚ùå Subject not found' });
    res.status(200).json(subject);
  } catch (err) {
    console.error('‚ùå Error fetching subject:', err);
    res.status(500).json({ message: '‚ùå Failed to fetch subject' });
  }
});

// ‚úÖ POST new subject (üîí protected)
router.post('/', verifyToken, async (req, res) => {
  const { name, icon } = req.body;

  if (!name || typeof name !== 'string') {
    return res.status(400).json({ message: '‚ùå Subject name is required and must be a string' });
  }

  try {
    const exists = await Subject.findOne({ name: name.trim() });
    if (exists) {
      return res.status(409).json({ message: '‚ùå Subject already exists' });
    }

    const newSubject = new Subject({
      name: name.trim(),
      icon: icon || null
    });

    const saved = await newSubject.save();
    res.status(201).json({
      message: '‚úÖ Subject saved successfully',
      subject: saved
    });
  } catch (err) {
    console.error('‚ùå Error saving subject:', err);
    res.status(500).json({
      message: '‚ùå Failed to save subject',
      error: err.message
    });
  }
});

// ‚úÖ PUT to update subject (üîí protected)
router.put('/:id', verifyToken, validateObjectId, async (req, res) => {
  const { name } = req.body;

  if (!name || typeof name !== 'string') {
    return res.status(400).json({ message: '‚ùå Name is required and must be a string' });
  }

  try {
    const updated = await Subject.findByIdAndUpdate(
      req.params.id,
      { name: name.trim() },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ message: '‚ùå Subject not found' });
    }

    res.status(200).json(updated);
  } catch (err) {
    console.error('‚ùå Failed to update subject:', err);
    res.status(500).json({ message: '‚ùå Error updating subject' });
  }
});

// ‚úÖ DELETE a subject (üîí protected)
router.delete('/:id', verifyToken, validateObjectId, async (req, res) => {
  try {
    const deleted = await Subject.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: '‚ùå Subject not found' });
    }

    res.status(204).end();
  } catch (err) {
    console.error('‚ùå Failed to delete subject:', err);
    res.status(500).json({ message: '‚ùå Error deleting subject' });
  }
});

// ‚úÖ DEBUG: view all (optional)
router.get('/debug/all', verifyToken, async (req, res) => {
  try {
    const subjects = await Subject.find();
    res.status(200).json(subjects);
  } catch (err) {
    console.error('‚ùå Failed to debug subjects:', err);
    res.status(500).json({ message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤' });
  }
});

module.exports = router;
