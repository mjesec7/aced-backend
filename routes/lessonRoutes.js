// routes/lessonRoutes.js
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Lesson = require('../models/lesson');
const verifyToken = require('../middlewares/authMiddleware');

// ‚úÖ Log every request
router.use((req, res, next) => {
  console.log(`üì¢ [${req.method}] ${req.originalUrl}`);
  next();
});

// ‚úÖ Validate ObjectId param
function validateObjectId(req, res, next) {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    console.warn(`‚ö†Ô∏è Invalid ObjectId: ${req.params.id}`);
    return res.status(400).json({ message: '‚ùå Invalid lesson ID format' });
  }
  next();
}

// ‚úÖ Auth Test
router.get('/test-auth', verifyToken, (req, res) => {
  console.log('‚úÖ /test-auth passed. User UID:', req.user.uid);
  res.json({ message: 'Auth works ‚úÖ', uid: req.user.uid });
});

// ‚úÖ Find lesson by subject & name
router.get('/by-name', async (req, res) => {
  const { subject, name } = req.query;
  if (!subject || !name) {
    return res.status(400).json({ message: '‚ùå Missing subject or name' });
  }
  try {
    const lesson = await Lesson.findOne({ subject, topic: name });
    if (!lesson) return res.status(404).json({ message: '‚ùå Lesson not found' });
    res.json(lesson);
  } catch (err) {
    console.error('‚ùå [GET /lessons/by-name] Error:', err);
    res.status(500).json({ message: '‚ùå Server error', error: err.message });
  }
});

// =====================
// üßπ MASS DELETE ROUTES
// =====================

router.delete('/all', verifyToken, async (req, res) => {
  try {
    const result = await Lesson.deleteMany({});
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –í–°–ï —É—Ä–æ–∫–∏: ${result.deletedCount}`);
    res.json({ message: `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —É—Ä–æ–∫–æ–≤.` });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤:', error);
    res.status(500).json({ message: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤', error: error.message });
  }
});

router.delete('/subject/:subjectName', verifyToken, async (req, res) => {
  try {
    const result = await Lesson.deleteMany({ subject: req.params.subjectName });
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —É—Ä–æ–∫(–æ–≤) –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: ${req.params.subjectName}`);
    res.json({ message: `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —É—Ä–æ–∫(–æ–≤) –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "${req.params.subjectName}".` });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É:', error);
    res.status(500).json({ message: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É', error: error.message });
  }
});

router.delete('/topic/:subjectName/:level/:topicName', verifyToken, async (req, res) => {
  const { subjectName, level, topicName } = req.params;
  try {
    const result = await Lesson.deleteMany({ subject: subjectName, level: Number(level), topic: topicName });
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —É—Ä–æ–∫(–æ–≤) –ø–æ —Ç–µ–º–µ "${topicName}" –≤ —É—Ä–æ–≤–Ω–µ ${level} (${subjectName})`);
    res.json({ message: `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —É—Ä–æ–∫(–æ–≤) –ø–æ —Ç–µ–º–µ "${topicName}".` });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ:', error);
    res.status(500).json({ message: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ', error: error.message });
  }
});

// =====================
// üìö LESSON CRUD ROUTES
// =====================

router.post('/', verifyToken, async (req, res) => {
  const {
    lessonName,
    subject,
    level,
    description,
    explanation,
    examples,
    hint,
    exercises,
    quizzes
  } = req.body;

  if (
    !lessonName ||
    !subject ||
    level === undefined ||
    !description ||
    !explanation ||
    !examples ||
    !hint ||
    !Array.isArray(exercises) ||
    !Array.isArray(quizzes)
  ) {
    return res.status(400).json({ message: '‚ùå Missing required lesson fields' });
  }

  try {
    const newLesson = new Lesson({
      lessonName,
      topic: lessonName, // fallback topic if not explicitly provided
      subject,
      level,
      description,
      explanation,
      examples,
      hint,
      exercises,
      quizzes
    });

    console.log('üß™ Saving lesson:', newLesson);
    const savedLesson = await newLesson.save();
    console.log(`‚úÖ –ù–æ–≤—ã–π —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: "${savedLesson.lessonName}" (${savedLesson._id})`);
    res.status(201).json(savedLesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error adding lesson', error: error.message });
  }
});

router.get('/topic/:topicId', async (req, res) => {
  try {
    const lessons = await Lesson.find({ topic: req.params.topicId });
    console.log(`üì§ –ù–∞–π–¥–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫(–æ–≤) –¥–ª—è —Ç–µ–º—ã: "${req.params.topicId}"`);
    res.status(200).json(lessons);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–º–µ:', error);
    res.status(500).json({ message: '‚ùå Server error fetching lessons by topic', error: error.message });
  }
});

router.get('/', async (req, res) => {
  try {
    const filter = req.query.type ? { type: req.query.type } : {};
    const lessons = await Lesson.find(filter);
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫(–æ–≤) (—Ñ–∏–ª—å—Ç—Ä: ${filter.type || 'all'})`);
    res.status(200).json(lessons);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤:', error);
    res.status(500).json({ message: '‚ùå Server error fetching lessons', error: error.message });
  }
});

router.get('/:id', validateObjectId, async (req, res) => {
  try {
    const lesson = await Lesson.findById(req.params.id);
    if (!lesson) {
      console.warn(`‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.params.id}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }
    console.log(`üìÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: ${lesson.lessonName} (${lesson._id})`);
    res.status(200).json(lesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É:', error);
    res.status(500).json({ message: '‚ùå Server error fetching lesson', error: error.message });
  }
});

router.put('/:id', verifyToken, validateObjectId, async (req, res) => {
  try {
    const updatedLesson = await Lesson.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedLesson) {
      console.warn(`‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å, —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.params.id}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }
    console.log(`üîÑ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: ${updatedLesson.lessonName} (${updatedLesson._id})`);
    res.status(200).json(updatedLesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error updating lesson', error: error.message });
  }
});

router.delete('/:id', verifyToken, validateObjectId, async (req, res) => {
  try {
    const deletedLesson = await Lesson.findByIdAndDelete(req.params.id);
    if (!deletedLesson) {
      console.warn(`‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${req.params.id}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }
    console.log(`üóëÔ∏è –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω: ${deletedLesson.lessonName} (${deletedLesson._id})`);
    res.status(200).json({ message: '‚úÖ Lesson successfully deleted' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error deleting lesson', error: error.message });
  }
});

module.exports = router;
