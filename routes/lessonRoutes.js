const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Lesson = require('../models/lesson');
const Topic = require('../models/topic');
const verifyToken = require('../middlewares/authMiddleware');

router.use((req, res, next) => {
  console.log(`üì¢ [${req.method}] ${req.originalUrl}`);
  next();
});

function validateObjectId(req, res, next) {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    console.warn(`‚ö†Ô∏è Invalid ObjectId: ${req.params.id}`);
    return res.status(400).json({ message: '‚ùå Invalid lesson ID format' });
  }
  next();
}

router.get('/', async (req, res) => {
  try {
    const filter = req.query.type ? { type: req.query.type } : {};
    const lessons = await Lesson.find(filter);
    console.log(`üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫(–æ–≤) (—Ñ–∏–ª—å—Ç—Ä: ${filter.type || 'all'})`);
    res.status(200).json(lessons);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤:', error);
    res.status(500).json({ message: '‚ùå Server error fetching lessons', error: error.message });
  }
});

router.delete('/all', verifyToken, async (req, res) => {
  try {
    const result = await Lesson.deleteMany({});
    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${result.deletedCount}`);
    res.status(200).json({ message: `‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${result.deletedCount}` });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:', err);
    res.status(500).json({ message: '‚ùå Server error deleting all lessons', error: err.message });
  }
});

router.get('/:id', validateObjectId, async (req, res) => {
  try {
    const lesson = await Lesson.findById(req.params.id);
    if (!lesson) {
      console.warn(`‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.params.id}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }

    console.log(`üìÖ –£—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω: ${lesson.lessonName}`);
    res.status(200).json(lesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error fetching lesson', error: error.message });
  }
});

router.get('/by-name', async (req, res) => {
  const { subject, name } = req.query;
  if (!subject || !name) {
    return res.status(400).json({ message: '‚ùå Missing subject or topic name' });
  }

  try {
    const lessons = await Lesson.find({
      subject,
      topic: name
    });

    if (!lessons.length) {
      console.warn(`‚ö†Ô∏è Lesson not found: ${subject} + ${name}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }

    console.log(`üìò –ù–∞–π–¥–µ–Ω —É—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∏: "${name}" –≤ "${subject}"`);
    res.status(200).json(lessons[0]);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏:', err);
    res.status(500).json({ message: '‚ùå Server error fetching lesson by name', error: err.message });
  }
});

router.put('/:id', verifyToken, validateObjectId, async (req, res) => {
  try {
    const updates = req.body;

    if (!updates.explanation && updates.content) {
      updates.explanation = updates.content;
    }

    if (!updates.abcExercises) {
      updates.abcExercises = [];
    }

    const updatedLesson = await Lesson.findByIdAndUpdate(req.params.id, updates, { new: true });
    if (!updatedLesson) {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${req.params.id}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }
    console.log(`üîÑ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: ${updatedLesson.lessonName}`);
    res.status(200).json(updatedLesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error updating lesson', error: error.message });
  }
});

router.delete('/:id', verifyToken, validateObjectId, async (req, res) => {
  try {
    const deletedLesson = await Lesson.findByIdAndDelete(req.params.id);
    if (!deletedLesson) {
      console.warn(`‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${req.params.id}`);
      return res.status(404).json({ message: '‚ùå Lesson not found' });
    }
    console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω: ${deletedLesson.lessonName}`);
    res.status(200).json({ message: '‚úÖ Lesson successfully deleted' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error deleting lesson', error: error.message });
  }
});

router.post('/', verifyToken, async (req, res) => {
  try {
    let {
      lessonName, subject, level, type, topicId, topic, topicDescription,
      description, explanation, examples, content, hint,
      exercises, quizzes, abcExercises, relatedSubjects
    } = req.body;

    if (!lessonName || !subject || level === undefined || !type || !description || !explanation || !examples) {
      return res.status(400).json({ message: '‚ùå Missing required lesson fields' });
    }

    let resolvedTopic;

    if (topicId && mongoose.Types.ObjectId.isValid(topicId)) {
      resolvedTopic = await Topic.findById(topicId);
    }

    if (!resolvedTopic) {
      const topicName = typeof topic === 'string' ? topic.trim() : '';
      const topicDesc = typeof topicDescription === 'string' ? topicDescription.trim() : '';

      if (!topicName) {
        return res.status(400).json({ message: '‚ùå Topic name is required' });
      }

      resolvedTopic = await Topic.findOne({
        subject,
        level,
        name: topicName
      });

      if (!resolvedTopic) {
        resolvedTopic = new Topic({
          name: topicName,
          subject,
          level,
          description: topicDesc
        });
        await resolvedTopic.save();
        console.log(`‚úÖ Created topic: ${resolvedTopic.name}`);
      } else {
        console.log(`‚ÑπÔ∏è Reusing topic: ${resolvedTopic.name}`);
      }
    }

    const newLesson = new Lesson({
      lessonName: typeof lessonName === 'string' ? lessonName.trim() : '',
      subject,
      level,
      type,
      topic: resolvedTopic._id,
      topicId: resolvedTopic._id,
      description: typeof description === 'string' ? description.trim() : '',
      explanation: typeof explanation === 'string' ? explanation.trim() : '',
      examples: typeof examples === 'string' ? examples.trim() : '',
      content: typeof content === 'string' ? content.trim() : '',
      hint: typeof hint === 'string' ? hint.trim() : '',
      exercises: Array.isArray(exercises) ? exercises : [],
      quizzes: Array.isArray(quizzes) ? quizzes : [],
      abcExercises: Array.isArray(abcExercises) ? abcExercises : [],
      relatedSubjects: Array.isArray(relatedSubjects) ? relatedSubjects : []
    });

    const savedLesson = await newLesson.save();
    console.log(`‚úÖ –ù–æ–≤—ã–π —É—Ä–æ–∫: "${savedLesson.lessonName}"`);
    res.status(201).json(savedLesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ message: '‚ùå Server error adding lesson', error: error.message });
  }
});

module.exports = router;
