// controllers/chatController.js - ENHANCED VERSION WITH LESSON CONTEXT
const axios = require('axios');
const Lesson = require('../models/lesson');
const User = require('../models/user');
require('dotenv').config();

// Helper function to get current month key for usage tracking
const getCurrentMonthKey = () => {
  const now = new Date();
  return `${now.getFullYear()}-${now.getMonth()}`;
};

// Helper function to check usage limits
const checkUsageLimits = (plan, currentUsage, hasImage = false) => {
  const limits = {
    free: { messages: 50, images: 5 },
    start: { messages: -1, images: 20 }, // -1 means unlimited
    pro: { messages: -1, images: -1 }
  };

  const planLimits = limits[plan] || limits.free;
  
  // Check message limit
  if (planLimits.messages !== -1 && currentUsage.messages >= planLimits.messages) {
    return {
      allowed: false,
      reason: 'message_limit_exceeded',
      message: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (${planLimits.messages}) –¥–ª—è –ø–ª–∞–Ω–∞ "${plan}". –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
    };
  }
  
  // Check image limit if image is attached
  if (hasImage && planLimits.images !== -1 && currentUsage.images >= planLimits.images) {
    return {
      allowed: false,
      reason: 'image_limit_exceeded',
      message: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${planLimits.images}) –¥–ª—è –ø–ª–∞–Ω–∞ "${plan}". –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
    };
  }
  
  return {
    allowed: true,
    remaining: {
      messages: planLimits.messages === -1 ? '‚àû' : Math.max(0, planLimits.messages - currentUsage.messages),
      images: planLimits.images === -1 ? '‚àû' : Math.max(0, planLimits.images - currentUsage.images)
    }
  };
};

// Helper function to track AI usage
const trackAIUsage = async (userId, usageData) => {
  try {
    const monthKey = getCurrentMonthKey();
    
    // Find user and update usage
    const user = await User.findOne({ firebaseId: userId });
    if (!user) {
      console.warn('‚ö†Ô∏è User not found for usage tracking:', userId);
      return;
    }

    // Initialize usage tracking if not exists
    if (!user.aiUsage) {
      user.aiUsage = {};
    }
    
    if (!user.aiUsage[monthKey]) {
      user.aiUsage[monthKey] = { messages: 0, images: 0 };
    }

    // Update usage
    user.aiUsage[monthKey].messages += usageData.messages || 0;
    user.aiUsage[monthKey].images += usageData.images || 0;
    
    // Add metadata
    if (usageData.lessonId) {
      if (!user.aiUsage[monthKey].lessons) {
        user.aiUsage[monthKey].lessons = {};
      }
      user.aiUsage[monthKey].lessons[usageData.lessonId] = 
        (user.aiUsage[monthKey].lessons[usageData.lessonId] || 0) + 1;
    }

    await user.save();
    console.log('‚úÖ AI usage tracked successfully:', {
      userId,
      monthKey,
      newUsage: user.aiUsage[monthKey]
    });

  } catch (error) {
    console.error('‚ùå Failed to track AI usage:', error);
  }
};

// Helper function to get user usage
const getUserUsage = async (userId) => {
  try {
    const user = await User.findOne({ firebaseId: userId });
    if (!user) {
      return {
        success: false,
        error: 'User not found'
      };
    }

    const monthKey = getCurrentMonthKey();
    const usage = user.aiUsage?.[monthKey] || { messages: 0, images: 0 };
    const plan = user.subscriptionPlan || 'free';

    return {
      success: true,
      usage,
      plan,
      monthKey
    };
  } catch (error) {
    console.error('‚ùå Failed to get user usage:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// ‚úÖ ENHANCED: Standard AI chat with lesson context support
const getAIResponse = async (req, res) => {
  try {
    const { userInput, imageUrl, lessonId } = req.body;
    const userId = req.user?.uid || req.user?.firebaseId;

    if (!userInput && !imageUrl) {
      return res.status(400).json({ error: '‚ùå –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }

    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á OpenAI' });
    }

    if (!userId) {
      return res.status(401).json({ error: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    // Check usage limits
    const usageInfo = await getUserUsage(userId);
    if (!usageInfo.success) {
      return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' });
    }

    const limitCheck = checkUsageLimits(usageInfo.plan, usageInfo.usage, !!imageUrl);
    if (!limitCheck.allowed) {
      return res.status(429).json({ error: limitCheck.message });
    }

    // üîí Filter sensitive topics
    const bannedWords = [
      '—Å—É–∏—Ü–∏–¥', '—Å–µ–∫—Å', '–ø–æ—Ä–Ω–æ', '–Ω–∞—Å–∏–ª–∏–µ', '—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º', '—É–±–∏–π—Å—Ç–≤–æ', '–æ—Ä—É–∂–∏–µ',
      '–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏', '–∞–ª–∫–æ–≥–æ–ª—å', '—Ä–∞—Å–∏–∑–º', '–≥–æ–º–æ—Ñ–æ–±–∏—è', '—Å–µ–∫—Ç', '—Ä–µ–ª–∏–≥–∏—è',
      '–∏—Å–ª–∞–º', '—Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å—Ç–≤–æ', '–∏—É–¥–∞–∏–∑–º', '—Ü–µ—Ä–∫–æ–≤—å', '–∫–æ—Ä–∞–Ω', '–±–∏–±–ª–∏—è', '—Ç–∞–ª–º—É–¥',
      '–ø—Ä–æ—Ä–æ–∫', '–±–æ–≥', '—Å–∞—Ç–∞–Ω–∞', '–ª—É—Ü–∏—Ñ–µ—Ä', '–∞—Ç–µ–∏–∑–º',
      '–ø–æ–ª–∏—Ç–∏–∫–∞', '–ø—É—Ç–∏–Ω', '–∑–µ–ª–µ–Ω—Å–∫–∏–π', '–±–∞–π–¥–µ–Ω', '—Ç—Ä–∞–º–ø', '–Ω–∞—Ü–∏–∑–º', '–≥–∏—Ç–ª–µ—Ä',
      '–≤–ª–∞—Å—Ç—å', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', '–≤–∞–∫—Ü–∏–Ω–∞', 'covid', '–±–µ–∂–µ–Ω—Ü—ã'
    ];
    const safeWords = ['–∫—Ç–æ', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '–∫–∞–∫–æ–≤'];
    const lowerText = (userInput || '').toLowerCase();

    const isHighlySensitive = bannedWords.some(word =>
      lowerText.includes(word) && !safeWords.some(safe => lowerText.includes(safe))
    );

    if (isHighlySensitive) {
      return res.status(403).json({
        reply: 'üö´ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.'
      });
    }

    // üß† Enhanced context from lesson
    let lessonContext = '';
    let lessonData = null;
    if (lessonId) {
      try {
        lessonData = await Lesson.findById(lessonId);
        if (lessonData) {
          lessonContext = `
–ö–û–ù–¢–ï–ö–°–¢ –£–†–û–ö–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${lessonData.lessonName}
- –¢–µ–º–∞: ${lessonData.topic}
- –ü—Ä–µ–¥–º–µ—Ç: ${lessonData.subject}
- –£—Ä–æ–≤–µ–Ω—å: ${lessonData.level}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${lessonData.description}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: ${lessonData.steps?.length || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
${lessonData.content ? `- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${lessonData.content}` : ''}
${lessonData.hint ? `- –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${lessonData.hint}` : ''}`;
        }
      } catch (err) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', err.message);
      }
    }

    // üî§ Message structure for OpenAI
    const contentArray = [];
    if (imageUrl) {
      contentArray.push({
        type: 'image_url',
        image_url: { url: imageUrl, detail: 'auto' },
      });
    }
    if (userInput) {
      contentArray.push({
        type: 'text',
        text: userInput,
      });
    }

    const systemPrompt = `–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ACED.

${lessonContext || '–û–ë–©–ò–ô –†–ï–ñ–ò–ú: –ü–æ–º–æ–≥–∏ —Å—Ç—É–¥–µ–Ω—Ç—É —Å –µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–º.'}

–¢–í–û–Ø –†–û–õ–¨:
- –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–Ω–∞–ª–æ–≥–∏–∏
- –ü–æ–æ—â—Ä—è–π –æ–±—É—á–µ–Ω–∏–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–∞
- –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
- –ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏
- –î–∞–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º
- –í–∫–ª—é—á–∞–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
- –ü–æ–æ—â—Ä—è–π –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –û–≥—Ä–∞–Ω–∏—á—å –æ—Ç–≤–µ—Ç 500 —Å–ª–æ–≤–∞–º–∏
- –ù–ï –æ–±—Å—É–∂–¥–∞–π –ø–æ–ª–∏—Ç–∏–∫—É, —Ä–µ–ª–∏–≥–∏—é –∏–ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã

${lessonData ? `
–û–°–û–ë–´–ï –£–ö–ê–ó–ê–ù–ò–Ø –î–õ–Ø –£–†–û–ö–ê:
- –°–≤—è–∑—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã —Å —Ç–µ–º–æ–π —É—Ä–æ–∫–∞: "${lessonData.topic}"
- –£—á–∏—Ç—ã–≤–∞–π —É—Ä–æ–≤–µ–Ω—å: ${lessonData.level} –∫–ª–∞—Å—Å
- –ü—Ä–µ–¥–º–µ—Ç: ${lessonData.subject}
- –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
` : ''}`;

    const messages = [
      {
        role: 'system',
        content: systemPrompt,
      },
      {
        role: 'user',
        content: contentArray,
      }
    ];

    console.log("üì§ Enhanced prompt to OpenAI for lesson:", lessonId || 'general');

    // üåê Send to OpenAI
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages,
        max_tokens: 1000,
        temperature: 0.7,
        presence_penalty: 0.3,
        frequency_penalty: 0.2,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 30000,
      }
    );

    const reply = response?.data?.choices?.[0]?.message?.content?.trim() || "‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.";

    // Track usage
    await trackAIUsage(userId, {
      messages: 1,
      images: imageUrl ? 1 : 0,
      lessonId: lessonId
    });

    res.json({ 
      reply,
      usage: limitCheck.remaining,
      lessonContext: !!lessonData
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç AI:", error.response?.data || error.message);
    
    if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
      return res.status(504).json({
        error: '‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      });
    }

    if (error.response?.status === 429) {
      return res.status(429).json({
        error: '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      });
    }

    res.status(500).json({
      error: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI',
      debug: process.env.NODE_ENV === 'development' ? (error.response?.data || error.message) : undefined
    });
  }
};

// ‚úÖ NEW: Enhanced lesson-context chat endpoint
const getLessonContextAIResponse = async (req, res) => {
  try {
    const { userInput, lessonContext, userProgress, stepContext } = req.body;
    const userId = req.user?.uid || req.user?.firebaseId;

    if (!userInput || !lessonContext) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞'
      });
    }

    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
    }

    // Check usage limits
    const usageInfo = await getUserUsage(userId);
    if (!usageInfo.success) {
      return res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
      });
    }

    const limitCheck = checkUsageLimits(usageInfo.plan, usageInfo.usage, false);
    if (!limitCheck.allowed) {
      return res.status(429).json({
        success: false,
        error: limitCheck.message
      });
    }

    // Build enhanced system prompt for lesson context
    const systemPrompt = buildLessonSystemPrompt(lessonContext, userProgress, stepContext);

    const messages = [
      {
        role: 'system',
        content: systemPrompt
      },
      {
        role: 'user',
        content: userInput
      }
    ];

    console.log('üéì Lesson-context AI request:', {
      userId,
      lessonId: lessonContext.lessonId,
      currentStep: userProgress?.currentStep,
      stepType: stepContext?.type
    });

    // Call OpenAI
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages,
        max_tokens: 600,
        temperature: 0.7,
        presence_penalty: 0.4,
        frequency_penalty: 0.3,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 30000,
      }
    );

    const aiReply = response?.data?.choices?.[0]?.message?.content?.trim() || 
      '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.';

    // Track usage
    await trackAIUsage(userId, {
      messages: 1,
      images: 0,
      lessonId: lessonContext.lessonId,
      context: 'lesson'
    });

    console.log('‚úÖ Lesson AI response generated successfully');

    res.json({
      success: true,
      reply: aiReply,
      context: 'lesson-integrated',
      usage: limitCheck.remaining
    });

  } catch (error) {
    console.error('‚ùå Lesson context AI error:', error);
    
    if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
      return res.status(504).json({
        success: false,
        error: '–ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      });
    }

    if (error.response?.status === 429) {
      return res.status(429).json({
        success: false,
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      });
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞'
    });
  }
};

// Helper function to build lesson-specific system prompt
function buildLessonSystemPrompt(lessonContext, userProgress, stepContext) {
  const currentStepType = stepContext?.type || 'unknown';
  const lessonName = lessonContext?.lessonName || '–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫';
  const topic = lessonContext?.topic || '–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ';
  const mistakes = userProgress?.mistakes || 0;
  const stars = userProgress?.stars || 0;
  const completedSteps = userProgress?.completedSteps?.length || 0;
  const totalSteps = lessonContext?.totalSteps || 1;
  const currentStepIndex = userProgress?.currentStep || 0;
  
  let roleGuidance = '';
  switch (currentStepType) {
    case 'explanation':
      roleGuidance = '–ü–æ–º–æ–≥–∏ —Å—Ç—É–¥–µ–Ω—Ç—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –ø–æ–Ω—è—Ç–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤.';
      break;
    case 'exercise':
      roleGuidance = '–î–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–π –º—ã—à–ª–µ–Ω–∏–µ, –Ω–æ –ù–ï –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.';
      break;
    case 'quiz':
    case 'tryout':
      roleGuidance = '–ü–æ–º–æ–≥–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –æ–±–¥—É–º–∞—Ç—å –µ–≥–æ –ø–æ—à–∞–≥–æ–≤–æ, –Ω–æ –ù–ï –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.';
      break;
    case 'vocabulary':
      roleGuidance = '–ü–æ–º–æ–≥–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.';
      break;
    default:
      roleGuidance = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—É—á–µ–Ω–∏—è.';
  }

  // Adjust tone based on performance
  let encouragementLevel = '';
  if (mistakes > 3) {
    encouragementLevel = '–°—Ç—É–¥–µ–Ω—Ç –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –±—É–¥—å –æ—Å–æ–±–µ–Ω–Ω–æ –æ–±–æ–¥—Ä—è—é—â–∏–º –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º. –†–∞–∑–±–∏–≤–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏.';
  } else if (mistakes === 0 && stars > 2) {
    encouragementLevel = '–°—Ç—É–¥–µ–Ω—Ç –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è! –ú–æ–∂–µ—à—å –±—ã—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.';
  } else {
    encouragementLevel = '–°—Ç—É–¥–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.';
  }

  const progressPercentage = Math.round((completedSteps / totalSteps) * 100);

  return `–¢—ã ‚Äî –æ–±–æ–¥—Ä—è—é—â–∏–π AI-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç—É —Å —É—Ä–æ–∫–æ–º "${lessonName}" (–¢–µ–º–∞: ${topic}).

–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
- –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞: –®–∞–≥ ${currentStepIndex + 1} –∏–∑ ${totalSteps} (${progressPercentage}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
- –¢–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞: ${currentStepType}
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞: ${mistakes} –æ—à–∏–±–æ–∫, ${stars} –∑–≤—ë–∑–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
- –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏: ${encouragementLevel}

–¢–í–û–Ø –†–û–õ–¨: ${roleGuidance}

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
- –ë—É–¥—å —Ç—ë–ø–ª—ã–º, –æ–±–æ–¥—Ä—è—é—â–∏–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π, –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º)
- –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π/—Ç–µ—Å—Ç–æ–≤: –î–∞–≤–∞–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ù–ï –ø—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã
- –î–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —è—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ—Ä—ã
- –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏: –†–∞–∑–±–∏–≤–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ, —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —á–∞—Å—Ç–∏
- –í—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π, –æ–±–æ–¥—Ä—è—é—â–µ–π –Ω–æ—Ç–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ (–º–∞–∫—Å–∏–º—É–º 1-2) –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–æ–≤. –í—Å–µ–≥–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–π –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.

–û–°–û–ë–´–ï –£–ö–ê–ó–ê–ù–ò–Ø:
- –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞ "—á—Ç–æ —Ç–∞–∫–æ–µ..." - –¥–∞–≤–∞–π —á—ë—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º
- –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º - –¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
- –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é - –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–Ω–∞–ª–æ–≥–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
- –í—Å–µ–≥–¥–∞ —Å–≤—è–∑—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞`;
}

// ‚úÖ NEW: Get user usage statistics
const getUserUsageStats = async (req, res) => {
  try {
    const userId = req.user?.uid || req.user?.firebaseId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
    }

    const usageInfo = await getUserUsage(userId);
    if (!usageInfo.success) {
      return res.status(500).json(usageInfo);
    }

    const limitCheck = checkUsageLimits(usageInfo.plan, usageInfo.usage, false);

    res.json({
      success: true,
      usage: usageInfo.usage,
      plan: usageInfo.plan,
      limits: limitCheck.remaining,
      monthKey: usageInfo.monthKey
    });

  } catch (error) {
    console.error('‚ùå Error getting usage stats:', error);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
    });
  }
};

module.exports = { 
  getAIResponse, 
  getLessonContextAIResponse,
  getUserUsageStats 
};