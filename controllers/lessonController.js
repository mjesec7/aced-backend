const Lesson = require('../models/lesson');
const Topic = require('../models/topic');
const mongoose = require('mongoose');

// ‚úÖ Add a new lesson
exports.addLesson = async (req, res) => {
  try {
    console.log('üì• [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', req.body);

    let {
      subject,
      level,
      topicId,
      topic,
      topicDescription,
      lessonName,
      explanation,
      examples,
      content,
      hint,
      exercises,
      quizzes,
      relatedSubjects,
      type,
      description
    } = req.body;

    if (!explanation && content) {
      console.warn('‚ö†Ô∏è Explanation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º content –≤–º–µ—Å—Ç–æ explanation.');
      explanation = content;
    }

    if (!subject || !level || !lessonName || !explanation || !examples || !description) {
      return res.status(400).json({ error: '‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' });
    }

    let resolvedTopic = null;

    if (topicId && mongoose.Types.ObjectId.isValid(topicId)) {
      resolvedTopic = await Topic.findById(topicId);
      if (!resolvedTopic) {
        return res.status(404).json({ error: '‚ùå –¢–µ–º–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
    } else {
      resolvedTopic = await Topic.findOne({
        subject,
        level,
        'name.en': topic?.trim()
      });

      if (!resolvedTopic) {
        const newTopicPayload = {
          name: { en: topic?.trim() || 'Untitled Topic' },
          subject,
          level,
          description: { en: topicDescription?.trim() || '' }
        };
        console.log('üß™ Creating Topic with:', newTopicPayload);

        resolvedTopic = new Topic(newTopicPayload);
        await resolvedTopic.save();
        console.log(`‚úÖ [–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã] –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: "${resolvedTopic.name.en}" (ID: ${resolvedTopic._id})`);
      } else {
        console.log(`‚ÑπÔ∏è [–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º—ã] ${resolvedTopic.name.en} (ID: ${resolvedTopic._id})`);
      }
    }

    const newLesson = new Lesson({
      subject,
      level,
      topic: resolvedTopic._id,
      topicId: resolvedTopic._id,
      lessonName,
      description,
      explanation,
      examples,
      content: content || '',
      hint: hint || '',
      exercises: Array.isArray(exercises) ? exercises : [],
      quizzes: Array.isArray(quizzes) ? quizzes : [],
      relatedSubjects: Array.isArray(relatedSubjects) ? relatedSubjects : [],
      type: type || 'free'
    });

    await newLesson.save();
    console.log(`‚úÖ [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "${newLesson.lessonName}" (ID: ${newLesson._id})`);
    res.status(201).json(newLesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error);
    if (error.code === 11000) {
      return res.status(409).json({ error: '‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ—Ö–æ–∂–∞—è —Ç–µ–º–∞ –∏–ª–∏ —É—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞' });
  }
};

// ‚úÖ Update lesson
exports.updateLesson = async (req, res) => {
  try {
    const lessonId = req.params.id;
    const updates = req.body;

    if (!lessonId) {
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É—Ä–æ–∫–∞' });
    }

    if (!updates.explanation && updates.content) {
      updates.explanation = updates.content;
    }

    const updatedLesson = await Lesson.findByIdAndUpdate(lessonId, updates, { new: true });

    if (!updatedLesson) {
      return res.status(404).json({ error: '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log(`‚úÖ [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: "${updatedLesson.lessonName}" (ID: ${updatedLesson._id})`);
    res.json(updatedLesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
};

// ‚úÖ Delete lesson
exports.deleteLesson = async (req, res) => {
  try {
    const lessonId = req.params.id;
    if (!lessonId) {
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É—Ä–æ–∫–∞' });
    }

    const deletedLesson = await Lesson.findByIdAndDelete(lessonId);
    if (!deletedLesson) {
      return res.status(404).json({ error: '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log(`‚úÖ [–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: "${deletedLesson.lessonName}" (ID: ${deletedLesson._id})`);
    res.json({ message: '‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
};

// ‚úÖ Get one lesson
exports.getLesson = async (req, res) => {
  try {
    const lessonId = req.params.id;
    if (!lessonId) {
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É—Ä–æ–∫–∞' });
    }

    const lesson = await Lesson.findById(lessonId);
    if (!lesson) {
      return res.status(404).json({ error: '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!lesson.explanation && lesson.content) {
      lesson.explanation = lesson.content;
    }

    console.log(`‚úÖ [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: "${lesson.lessonName}" (ID: ${lesson._id})`);
    res.json(lesson);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞' });
  }
};

// ‚úÖ Get lessons by topic
exports.getLessonsByTopic = async (req, res) => {
  try {
    const topicId = req.params.topicId;
    if (!topicId) {
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TopicID' });
    }

    const lessons = await Lesson.find({ topic: topicId });
    console.log(`‚úÖ [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–º–µ] –ù–∞–π–¥–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫(–æ–≤) –¥–ª—è TopicID: "${topicId}"`);
    res.json(lessons);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:', error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤' });
  }
};

module.exports = {
  addLesson,
  updateLesson,
  deleteLesson,
  getLesson,
  getLessonsByTopic
};