const Lesson = require('../models/lesson');

// ‚úÖ Add a new lesson
exports.addLesson = async (req, res) => {
  try {
    console.log('üì• [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', req.body);

    let {
      subject,
      level,
      topicId,
      lessonName,
      explanation,
      examples,
      content,
      hint,
      exercises,
      quiz,
      relatedSubjects,
      type
    } = req.body;

    // Use content as fallback if explanation is missing
    if (!explanation && content) {
      console.warn('‚ö†Ô∏è [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] Explanation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º content –≤–º–µ—Å—Ç–æ explanation.');
      explanation = content;
    }

    // Validate required fields
    if (!subject || !level || !topicId || !lessonName || !explanation || !examples) {
      console.warn('‚ö†Ô∏è [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:', { subject, level, topicId, lessonName, explanation, examples });
      return res.status(400).json({ error: '‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' });
    }

    // Create a new Lesson
    const newLesson = new Lesson({
      subject,
      level,
      topic: topicId, // ‚ö° Save topicId in topic field, as your model expects topic (not topicId)
      lessonName,
      explanation,
      examples,
      content: content || '',
      hint: hint || '',
      exercises: exercises || [],
      quiz: quiz || [],
      relatedSubjects: relatedSubjects || [],
      type: type || 'free',
    });

    await newLesson.save();

    console.log(`‚úÖ [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "${newLesson.lessonName}" (ID: ${newLesson._id})`);
    res.status(201).json(newLesson);
  } catch (error) {
    console.error('‚ùå [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error.message || error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞' });
  }
};

// ‚úÖ Update existing lesson
exports.updateLesson = async (req, res) => {
  try {
    const lessonId = req.params.id;
    const updates = req.body;

    console.log(`üì• [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] ID: ${lessonId}, –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updates);

    if (!lessonId) {
      console.warn('‚ö†Ô∏è [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] lessonId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É—Ä–æ–∫–∞' });
    }

    if (!updates.explanation && updates.content) {
      console.warn('‚ö†Ô∏è [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] Explanation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º content –≤–º–µ—Å—Ç–æ explanation.');
      updates.explanation = updates.content;
    }

    const updatedLesson = await Lesson.findByIdAndUpdate(lessonId, updates, { new: true });

    if (!updatedLesson) {
      console.warn(`‚ö†Ô∏è [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —Å ID ${lessonId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return res.status(404).json({ error: '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log(`‚úÖ [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: "${updatedLesson.lessonName}" (ID: ${updatedLesson._id})`);
    res.json(updatedLesson);
  } catch (error) {
    console.error('‚ùå [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error.message || error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
};

// ‚úÖ Delete lesson
exports.deleteLesson = async (req, res) => {
  try {
    const lessonId = req.params.id;
    console.log(`üì• [–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] ID: ${lessonId}`);

    if (!lessonId) {
      console.warn('‚ö†Ô∏è [–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] lessonId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É—Ä–æ–∫–∞' });
    }

    const deletedLesson = await Lesson.findByIdAndDelete(lessonId);

    if (!deletedLesson) {
      console.warn(`‚ö†Ô∏è [–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —Å ID ${lessonId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
      return res.status(404).json({ error: '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log(`‚úÖ [–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: "${deletedLesson.lessonName}" (ID: ${deletedLesson._id})`);
    res.json({ message: '‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('‚ùå [–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error.message || error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
};

// ‚úÖ Fetch one lesson
exports.getLesson = async (req, res) => {
  try {
    const lessonId = req.params.id;
    console.log(`üì• [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] ID: ${lessonId}`);

    if (!lessonId) {
      console.warn('‚ö†Ô∏è [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] lessonId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É—Ä–æ–∫–∞' });
    }

    const lesson = await Lesson.findById(lessonId);

    if (!lesson) {
      console.warn(`‚ö†Ô∏è [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —Å ID ${lessonId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return res.status(404).json({ error: '‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!lesson.explanation && lesson.content) {
      console.warn(`‚ö†Ô∏è [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] Explanation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±–µ—Ä—ë–º content.`);
      lesson.explanation = lesson.content;
    }

    console.log(`‚úÖ [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: "${lesson.lessonName}" (ID: ${lesson._id})`);
    res.json(lesson);
  } catch (error) {
    console.error('‚ùå [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error.message || error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞' });
  }
};

// ‚úÖ Fetch all lessons of a topic
exports.getLessonsByTopic = async (req, res) => {
  try {
    const topicId = req.params.topicId;
    console.log(`üì• [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–º–µ] TopicID: ${topicId}`);

    if (!topicId) {
      console.warn('‚ö†Ô∏è [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–º–µ] topicId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      return res.status(400).json({ error: '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TopicID' });
    }

    const lessons = await Lesson.find({ topic: topicId });

    console.log(`‚úÖ [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–º–µ] –ù–∞–π–¥–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫(–æ–≤) –¥–ª—è TopicID: "${topicId}"`);
    res.json(lessons);
  } catch (error) {
    console.error('‚ùå [–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–º–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤:', error.message || error);
    res.status(500).json({ error: error.message || '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–æ–≤' });
  }
};

module.exports = {
  addLesson,
  updateLesson,
  deleteLesson,
  getLesson,
  getLessonsByTopic,
};
